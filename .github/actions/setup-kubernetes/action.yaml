name: "Setup Kubernetes"
description: 'Installs Kubernetes cluster'
inputs:
  kubernetesVersion:
    description: "Kubernetes version"
    default: 1.27.1
runs:
  using: "composite"
  steps:
  - name: Configure system
    shell: bash
    run: |
      set -euExo pipefail
      shopt -s inherit_errexit
      
      # Github Action workers have DROP on FORWARD policy by default, Kube requires packet forwarding
      sudo iptables -w -P FORWARD ACCEPT
      
      # Required by kubeadm
      sudo modprobe overlay
      sudo modprobe br_netfilter
      sudo swapoff -a
      echo 'net.ipv4.ip_forward = 1' | sudo tee -a  /etc/sysctl.d/90-kube.conf >/dev/null
      # We need to raise `fs.nr_open` as it limits how high can systemd units configure LimitNOFILE
      echo 'fs.nr_open = 10485760' | sudo tee -a /etc/sysctl.d/90-kube.conf >/dev/null
      echo 'fs.aio-max-nr = 10485760' | sudo tee -a /etc/sysctl.d/90-kube.conf >/dev/null
      echo 'net.bridge.bridge-nf-call-iptables  = 1' | sudo tee -a /etc/sysctl.d/90-kube.conf >/dev/null
      echo 'net.bridge.bridge-nf-call-ip6tables = 1' | sudo tee -a /etc/sysctl.d/90-kube.conf >/dev/null
      
      sudo sysctl --system

  - name: Install cri-o
    shell: bash
    run: |
      set -euExo pipefail
      shopt -s inherit_errexit
      
      # Raise crio limits
      sudo mkdir /etc/systemd/system/cri-o.service.d
      cat << EOF | sudo tee /etc/systemd/system/cri-o.service.d/override.conf
      [Service]
      LimitNOFILE=10485760
      LimitNPROC=10485760
      EOF
      
      source /etc/os-release
      KUBERNETES_VERSION_SHORT=$( echo ${{ inputs.kubernetesVersion }} | cut -d'.' -f1-2 )
      export KUBERNETES_VERSION_SHORT
      export KUBERNETES_VERSION=${{ inputs.kubernetesVersion }}
      
      sudo apt-get update
      sudo apt-get install -y apt-transport-https ca-certificates curl gpg
      
      sudo mkdir -p /etc/apt/keyrings/
      
      curl -L https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_${VERSION_ID}/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/libcontainers-archive-keyring.gpg
      curl -L https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/${KUBERNETES_VERSION_SHORT}/xUbuntu_${VERSION_ID}/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/libcontainers-crio-archive-keyring.gpg
      
      echo "deb [signed-by=/etc/apt/keyrings/libcontainers-archive-keyring.gpg] https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_${VERSION_ID}/ /" | sudo tee /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list
      echo "deb [signed-by=/etc/apt/keyrings/libcontainers-crio-archive-keyring.gpg] https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/${KUBERNETES_VERSION_SHORT}/xUbuntu_${VERSION_ID}/ /" | sudo tee /etc/apt/sources.list.d/devel:kubic:libcontainers:stable:cri-o:${KUBERNETES_VERSION_SHORT}.list
      
      sudo apt-get update
      sudo apt-get install -y --no-install-recommends cri-o cri-o-runc conmon
      
      cat << EOF | sudo tee /etc/crio/crio.conf.d/02-cgroup-manager.conf
      [crio.runtime]
      conmon_cgroup = "pod"
      cgroup_manager = "systemd"
      EOF
      
      sudo systemctl daemon-reload
      sudo systemctl enable --now crio

  - name: Install kubernetes
    shell: bash
    run: |
      set -euExo pipefail
      shopt -s inherit_errexit
      
      export KUBERNETES_VERSION_SHORT=$( echo ${{ inputs.kubernetesVersion }} | cut -d'.' -f1-2 )
      export KUBERNETES_PKG_VERSION=${{ inputs.kubernetesVersion }}-1.1
      
      sudo apt-get update
      sudo apt-get install -y --no-install-recommends conntrack socat ebtables
      
      ls -la /etc/apt/keyrings/
      
      tmp_file=$( mktemp )
      curl -fsSL https://pkgs.k8s.io/core:/stable:/v${KUBERNETES_VERSION_SHORT}/deb/Release.key -o ${tmp_file}
      sudo gpg --no-tty --batch --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg ${tmp_file}
      
      
      echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v${KUBERNETES_VERSION_SHORT}/deb/ /" | sudo tee /etc/apt/sources.list.d/kubernetes.list
      sudo apt-get update
      
      # Remove conflicting packages (also removes podman).
      sudo apt-get remove containernetworking-plugins
      
      sudo apt-get install -y --no-install-recommends kubelet="${KUBERNETES_PKG_VERSION}" kubeadm="${KUBERNETES_PKG_VERSION}" kubectl="${KUBERNETES_PKG_VERSION}"

      # Podman got wiped by removing `containernetworking-plugins` so we have to install it from the new repo.
      sudo apt-get install podman
  - name: Start Kubernetes
    shell: bash
    run: |
      set -euExo pipefail
      shopt -s inherit_errexit
      
      cat << EOF | sudo tee /etc/ssl/certs/audit-policy.yaml > /dev/null
      apiVersion: audit.k8s.io/v1
      kind: Policy
      omitStages:
      - "RequestReceived"
      rules:
      - level: Metadata
        resources:
        - group: ""
          resources:
          - "events"
      - level: RequestResponse
        verbs:
        - create
        - update
        - patch
      - level: Metadata
      EOF
      
      cat << EOF | sudo tee /root/kubeadm-config.yaml > /dev/null
      kind: ClusterConfiguration
      apiVersion: kubeadm.k8s.io/v1beta3
      kubernetesVersion: v${{ inputs.kubernetesVersion }}
      apiServer:
        extraArgs:
          event-ttl: 24h
          audit-policy-file: /etc/ssl/certs/audit-policy.yaml
          audit-log-path: /var/log/kube-apiserver-audit.log
        extraVolumes:
        - name: logs
          hostPath: /var/log
          mountPath: /var/log
      ---
      apiVersion: kubeadm.k8s.io/v1beta3
      kind: InitConfiguration
      nodeRegistration:
        criSocket: "unix:///var/run/crio/crio.sock"
        kubeletExtraArgs:
          runtime-cgroups: /system.slice/crio.service
      ---
      apiVersion: kubelet.config.k8s.io/v1beta1
      kind: KubeletConfiguration
      cgroupDriver: systemd
      cgroupRoot: /
      systemCgroups: /system.slice
      kubeletCgroups: /system.slice/kubelet.service
      enforceNodeAllocatable:
      - pods
      - system-reserved
      systemReservedCgroup: /system.slice
      systemReserved:
        cpu: "200m"
        ephemeral-storage: 1Gi
      serializeImagePulls: false
      containerLogMaxSize: 50Mi
      cpuManagerPolicy: static
      maxPods: 1024
      kubeAPIQPS: 30
      kubeAPIBurst: 50
      hairpinMode: hairpin-veth
      EOF
      
      # After kubelet installation, kubelet service is started with the default config.
      # Resetting using kubeadm clears kubelet config and state directories which allows for start from scratch.
      sudo kubeadm reset --force --cri-socket=unix:///var/run/crio/crio.sock
      
      sudo kubeadm init --config=/root/kubeadm-config.yaml
      
      mkdir -p "${HOME}/.kube"
      sudo cat /etc/kubernetes/admin.conf > "${HOME}/.kube/config"
      sudo chown $( id -u ):$( id -g ) "${HOME}/.kube/config"
      
      kubectl version
      
      # master taint is deprecated in 1.24 and removed in 1.25
      # control-plane taint is added in 1.25
      # kubectl returns an error if taint isn't there when we try to remove it, to overcome this we first taint it, and then untaint
      kubectl taint nodes --selector node-role.kubernetes.io/control-plane= --overwrite node-role.kubernetes.io/control-plane:NoSchedule
      kubectl taint nodes --selector node-role.kubernetes.io/control-plane= node-role.kubernetes.io/control-plane-
      kubectl taint nodes --selector node-role.kubernetes.io/control-plane= --overwrite node-role.kubernetes.io/master:NoSchedule
      kubectl taint nodes --selector node-role.kubernetes.io/control-plane= node-role.kubernetes.io/master-
      
      kubectl -n kube-system rollout status --timeout=5m deployment.apps/coredns

  - name: Tweak Kubernetes
    shell: bash
    run: |
      set -euExo pipefail
      shopt -s inherit_errexit
      
      # Allow admin to use ephemeralcontainers
      kubectl apply --server-side -f - <<EOF
        apiVersion: rbac.authorization.k8s.io/v1
        kind: ClusterRole
        metadata:
          name: scylladb-e2e:hotfixes
          labels:
            rbac.authorization.k8s.io/aggregate-to-admin: "true"
        rules:
        - apiGroups:
          - ""
          resources:
          - pods/ephemeralcontainers
          verbs:
          - patch
      EOF
      
      # Force default resources
      kubectl apply --server-side -f - <<EOF
        apiVersion: v1
        kind: LimitRange
        metadata:
          name: cpu-resource-constraint
        spec:
          limits:
          - type: Container
            default:
              cpu: "1"
              memory: 1Gi
            defaultRequest:
              cpu: 100m
              memory: 100Mi
            max:
              cpu: "1"
      EOF

  - name: Make extra disk space
    shell: bash
    run: |
      set -euExo pipefail
      shopt -s inherit_errexit

      sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc
