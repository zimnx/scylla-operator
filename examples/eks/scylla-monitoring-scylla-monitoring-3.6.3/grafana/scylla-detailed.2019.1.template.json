{
    "dashboard": {
        "class": "dashboard",
        "uid": "detailed-2019-1",
        "rows": [
            {
                "class": "logo_row"
            },
            {
                "class": "row",
                "panels": [
                    {
                        "class": "percent_panel",
                        "description": "The percentage of the time during which Scylla utilized the CPU. Note that because Scylla does busy polling for some time before going idle, CPU utilization as seen by the operating system may be much higher. Your system is not yet CPU-bottlenecked until this metric is high.",
                        "span": 3,
                        "targets": [
                            {
                                "expr": "avg(scylla_reactor_utilization{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"} ) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "",
                                "refId": "A",
                                "step": 4
                            }
                        ],
                        "title": "Load"
                    },
                    {
                        "class": "ops_panel",
                        "span": 3,
                        "targets": [
                            {
                                "expr": "$func(rate(scylla_transport_requests_served{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[60s])) by ([[by]]) + $func(rate(scylla_thrift_served{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[60s])) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "",
                                "metric": "",
                                "refId": "A",
                                "step": 1
                            }
                        ],
                        "description": "Amount of requests served as the coordinator. Imbalances here represent dispersion at the connection level, not your data model.",
                        "title": "Requests Served per [[by]] - Coordinator"
                    },
                    {
                        "class": "rps_panel",
                        "span": 3,
                        "targets": [
                            {
                                "expr": "$func(rate(scylla_database_total_reads{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[60s])) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "",
                                "refId": "A",
                                "step": 1
                            }
                        ],
                        "title": "Reads per [[by]] - Replica"
                    },
                    {
                        "class": "wps_panel",
                        "span": 3,
                        "targets": [
                            {
                                "expr": "$func(rate(scylla_database_total_writes{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[60s])) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "",
                                "metric": "",
                                "refId": "A",
                                "step": 1
                            }
                        ],
                        "title": "Writes per [[by]] - Replica"
                    }
                ],
                "title": "New row"
            },
            {
                "class": "row",
                "height": "25px",
                "gridPos": {"h": 2},
                "panels": [
                    {
                        "class": "text_header_panel",
                        "content": "<h1 style=\"color:#5881c2; border-bottom: 3px solid #5881c2;\">Reads and Writes - Coordinator</h1>"
                    },
                    {
                        "class": "text_header_panel",
                        "content": "<h1 style=\"color:#5881c2; border-bottom: 3px solid #5881c2;\">Timeouts and Errors - Coordinator</h1>"
                    }
                ],
                "title": "New row"
            },
            {
                "class": "row",
                "height": "200px",
                "panels": [
                    {
                        "class": "wps_panel",
                        "span": 3,
                        "targets": [
                            {
                                "expr": "$func(scylla_storage_proxy_coordinator_foreground_writes{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "",
                                "refId": "A",
                                "step": 1
                            }
                        ],
                        "description": "Foreground writes are writes that weren't acknowledged yet to the application. For instance, if a single replica responded and two are needed due to the consistency level. This metric represents a queue size, not a rate. High values here correlate with increased write latencies.",
                        "title": "Foreground Writes per [[by]]"
                    },
                    {
                        "class": "rps_panel",
                        "span": 3,
                        "targets": [
                            {
                                "expr": "$func(scylla_storage_proxy_coordinator_foreground_reads{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "",
                                "metric": "",
                                "refId": "A",
                                "step": 1
                            }
                        ],
                        "description": "Foreground reads are reads that weren't acknowledged yet to the application. For instance, if a single replica responded and two are needed due to the consistency level. This metric represents a queue size, not a rate. High values here correlate with increased read latencies.",
                        "title": "Foreground Reads per [[by]]"
                    },
                    {
                        "class": "wps_panel",
                        "span": 3,
                        "targets": [
                            {
                                "expr": "$func(rate(scylla_storage_proxy_coordinator_write_timeouts{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[1m])) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "",
                                "refId": "A",
                                "step": 1
                            }
                        ],
                        "description": "Requests that Scylla tried to write but timed out. Timeouts are counted in the node that received the request (the coordinator), not at the replicas.",
                        "title": "Write Timeouts/Seconds per [[by]]"
                    },
                    {
                        "class": "wps_panel",
                        "span": 3,
                        "targets": [
                            {
                                "expr": "$func(rate(scylla_storage_proxy_coordinator_write_unavailable{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[1m])) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "",
                                "refId": "A",
                                "step": 1
                            }
                        ],
                        "description": "Requests that Scylla did not even try to write because replicas that were needed to execute this write were unavailable. Unavailable writes are counted in the node that received the request (the coordinator), not at the replicas.",
                        "title": "Write Unavailable/Seconds per [[by]]"
                    }
                ],
                "title": "New row"
            },
            {
                "class": "row",
                "height": "200px",
                "panels": [
                    {
                        "class": "wps_panel",
                        "span": 3,
                        "targets": [
                            {
                                "expr": "$func(scylla_storage_proxy_coordinator_background_writes{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "",
                                "refId": "A",
                                "step": 1
                            }
                        ],
                        "description": "Background writes are writes that are already acknowledged to the application but have additional work to be done. For instance, if a replica responded and only one is needed, this request is still listed as a background request until all replicas respond. This metric represents a queue size, not a rate. High values here correlate with increased write latencies.",
                        "title": "Background Writes per [[by]]"
                    },
                    {
                        "class": "rps_panel",
                        "span": 3,
                        "targets": [
                            {
                                "expr": "$func(scylla_storage_proxy_coordinator_background_reads{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "",
                                "refId": "A",
                                "step": 4
                            }
                        ],
                        "description": "Background reads are reads that are already acknowledged to the application but have additional work to be done. For instance, if a replica responded and only one is needed, this request is still listed as a background request until all replicas respond. This metric represents a queue size, not a rate. High values here correlate with increased read latencies.",
                        "title": "Background Reads per [[by]]"
                    },
                    {
                        "class": "rps_panel",
                        "span": 3,
                        "targets": [
                            {
                                "expr": "$func(rate(scylla_storage_proxy_coordinator_read_timeouts{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[1m])+rate(scylla_storage_proxy_coordinator_range_timeouts{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[1m])) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "",
                                "refId": "A",
                                "step": 1
                            }
                        ],
                        "description": "Requests that Scylla tried to read but timed out. Timeouts are counted in the node that received the request (the coordinator), not at the replicas.",
                        "title": "Read Timeouts/Seconds per [[by]]"
                    },
                    {
                        "class": "rps_panel",
                        "span": 3,
                        "targets": [
                            {
                                "expr": "$func(rate(scylla_storage_proxy_coordinator_read_unavailable{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[1m])) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "",
                                "metric": "",
                                "refId": "A",
                                "step": 4
                            }
                        ],
                        "description": "Requests that Scylla did not even try to read because replicas that were needed to execute this write were unavailable. Unavailable reads are counted in the node that received the request (the coordinator), not at the replicas.",
                        "title": "Read Unavailable/Seconds per [[by]]"
                    }
                ],
                "title": "New row"
            },
            {
                "class": "row",
                "height": "200px",
                "panels": [
                    {
                        "class": "wps_panel",
                        "span": 3,
                        "targets": [
                            {
                                "expr": "$func(rate(scylla_hints_manager_written{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[60s])) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "",
                                "refId": "A",
                                "step": 1
                            }
                        ],
                        "title": "Hints Written per [[by]]"
                    },
                    {
                        "class": "ops_panel",
                        "span": 3,
                        "targets": [
                            {
                                "expr": "$func(rate(scylla_hints_manager_sent{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[60s])) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "",
                                "refId": "A",
                                "step": 4
                            }
                        ],
                        "title": "Hints sent per [[by]]"
                    },
                    {
                        "class": "rps_panel",
                        "span": 3,
                        "targets": [
                            {
                                "expr": "$func(rate(scylla_storage_proxy_coordinator_speculative_digest_reads{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[60s])) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "",
                                "refId": "A",
                                "step": 4
                            }
                        ],
                        "description" : "Number of times a digest read was done on behalf of a speculative retry.\n\nSpeculative retry is a mechanism that causes the client or server to speculate that a request may fail, and send a new request.\n\nspeculative retry may reduce latency in exchange for system load, but only if there is little activity.\n\nA lot of speculative retries increases load and can harm latency more than helping.",
                        "title": "Speculative Digest Reads By [[by]]"
                    },
                    {
                        "class": "rps_panel",
                        "span": 3,
                        "targets": [
                            {
                                "expr": "$func(rate(scylla_storage_proxy_coordinator_speculative_data_reads{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[60s])) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "",
                                "refId": "A",
                                "step": 4
                            }
                        ],
                        "description" : "Number of times a read was done on behalf of a speculative retry.\n\nSpeculative retry is a mechanism that causes the client or server to speculate that a request may fail, and send a new request.\n\nspeculative retry may reduce latency in exchange for system load, but only if there is little activity.\n\nA lot of speculative retries increases load and can harm latency more than helping.",
                        "title": "Speculative Data Reads By [[by]]"
                    }
                ],
                "title": "New row"
            },
            {
                "class": "row",
                "gridPos": {"h": 2},
                "panels": [
                    {
                        "class": "plain_text",
                        "content": "<h1 style=\"color:#5881c2; border-bottom: 3px solid #5881c2;\">Replica</h1>"
                    }
                 ]
            },
            {
                "class": "row",
                "height": "auto",
                "panels": [
                    {
                        "class": "reads_panel",
                        "description" : "The number of currently active read operations",
                        "span": 3,
                        "targets": [
                            {
                                "expr": "$func(scylla_database_active_reads{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "",
                                "refId": "A",
                                "step": 1
                            }
                        ],
                        "title": "Active sstable reads"
                    },
                    {
                        "class": "reads_panel",
                        "span": 3,
                        "targets": [
                            {
                                "expr": "$func(scylla_database_queued_reads{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "",
                                "refId": "A",
                                "step": 1
                            }
                        ],
                        "description": "number of currently queued read operations",
                        "title": "Queued sstable reads"
                    },
                    {
                        "class": "writes_panel",
                        "span": 3,
                        "targets": [
                            {
                                "expr": "$func(scylla_database_requests_blocked_memory_current{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "",
                                "refId": "A",
                                "step": 1
                            }
                        ],
                        "description" :"The current number of requests blocked due to reaching the memory quota. Non-zero value indicates that our bottleneck is memory",
                        "title": "Writes currently blocked on dirty"
                    },
                    {
                        "class": "writes_panel",
                        "span": 3,
                        "targets": [
                            {
                                "expr": "$func(scylla_commitlog_pending_allocations{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "",
                                "refId": "A",
                                "step": 1
                            }
                        ],
                        "description" :"number of currently pending allocations. A non-zero value indicates that we have a bottleneck in the disk write flow.",
                        "title": "Writes currently blocked on commitlog"
                    },
                    {
                        "class": "text_panel",
                        "content": "",
                        "mode": "markdown",
                        "span": 3
                    },
                    {
                        "class": "rps_panel",
                        "span": 3,
                        "targets": [
                            {
                                "expr": "$func(rate(scylla_database_total_reads_failed{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[60s])) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "",
                                "refId": "A",
                                "step": 1
                            }
                        ],
                        "title": "Reads failed"
                    },
                    {
                        "class": "wps_panel",
                        "span": 3,
                        "targets": [
                            {
                                "expr": "$func(rate(scylla_database_requests_blocked_memory{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[60s])) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "",
                                "refId": "A",
                                "step": 1
                            }
                        ],
                        "title": "Writes blocked on dirty"
                    },
                    {
                        "class": "wps_panel",
                        "span": 3,
                        "targets": [
                            {
                                "expr": "$func(rate(scylla_commitlog_requests_blocked_memory{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[60s])) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "",
                                "refId": "A",
                                "step": 1
                            }
                        ],
                        "title": "Writes blocked on commitlog"
                    },
                    {
                        "class": "text_panel",
                        "content": "",
                        "mode": "markdown",
                        "span": 3
                    },
                    {
                        "class": "text_panel",
                        "content": "",
                        "mode": "markdown",
                        "span": 3
                    },
                    {
                        "class": "wps_panel",
                        "span": 3,
                        "targets": [
                            {
                                "expr": "$func(rate(scylla_database_total_writes_failed{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[60s])) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "",
                                "refId": "A",
                                "step": 1
                            }
                        ],
                        "title": "Writes failed"
                    },
                    {
                        "class": "wps_panel",
                        "span": 3,
                        "targets": [
                            {
                                "expr": "$func(rate(scylla_database_total_writes_timedout{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[60s])) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "",
                                "refId": "A",
                                "step": 1
                            }
                        ],
                        "title": "Writes timed out"
                    }
                ],
                "title": "New row"
            },
            {
                "class": "row",
                "height": "25px",
                "gridPos": {"h": 2},
                "panels": [
                    {
                        "class": "text_panel",
                        "content": "<h1 style=\"color:#5881c2; border-bottom: 3px solid #5881c2;\">Cache - Replica</h1>",
                        "style": {}
                    }
                ],
                "title": "New row"
            },
            {
                "class": "row",
                "panels": [
                    {
                        "class": "rps_panel",
                        "span": 6,
                        "targets": [
                            {
                                "expr": "$func(rate(scylla_cache_reads{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[60s]) - rate(scylla_cache_reads_with_misses{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[60s])) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "",
                                "refId": "A",
                                "step": 1
                            }
                        ],
                        "title": "Reads with no misses"
                    },
                    {
                        "class": "rps_panel",
                        "span": 6,
                        "targets": [
                            {
                                "expr": "$func(rate(scylla_cache_reads_with_misses{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[60s])) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "",
                                "refId": "A",
                                "step": 1
                            }
                        ],
                        "title": "Reads with misses"
                    }
                ]
            },
            {
                "class" : "row",
                "panels": [
                    {
                        "class": "rps_panel",
                        "span": 3,
                        "targets": [
                            {
                                "expr": "$func(rate(scylla_cache_row_hits{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[60s])) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "",
                                "refId": "A",
                                "step": 1
                            }
                        ],
                        "title": "Row Hits"
                    },
                    {
                        "class": "rps_panel",
                        "span": 3,
                        "targets": [
                            {
                                "expr": "$func(rate(scylla_cache_partition_hits{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[60s])) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "",
                                "refId": "A",
                                "step": 1
                            }
                        ],
                        "title": "Partition Hits"
                    },
                    {
                        "class": "rps_panel",
                        "span": 3,
                        "targets": [
                            {
                                "expr": "$func(rate(scylla_cache_row_misses{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[60s])) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "",
                                "refId": "A",
                                "step": 1
                            }
                        ],
                        "title": "Row Misses"
                    },
                    {
                        "class": "rps_panel",
                        "span": 3,
                        "targets": [
                            {
                                "expr": "$func(rate(scylla_cache_partition_misses{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[60s])) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "",
                                "refId": "A",
                                "step": 1
                            }
                        ],
                        "title": "Partition Misses"
                    }
                ],
                "title": "New row"
            },
            {
                "class": "row",
                "panels": [
                    {
                        "class": "rps_panel",
                        "span": 3,
                        "targets": [
                            {
                                "expr": "$func(rate(scylla_cache_row_insertions{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[60s])) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "",
                                "refId": "A",
                                "step": 1
                            }
                        ],
                        "title": "Row Insertions"
                    },
                    {
                        "class": "rps_panel",
                        "span": 3,
                        "targets": [
                            {
                                "expr": "$func(rate(scylla_cache_partition_insertions{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[60s])) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "",
                                "refId": "A",
                                "step": 1
                            }
                        ],
                        "title": "Partition Insertions"
                    },
                    {
                        "class": "ops_panel",
                        "span": 3,
                        "targets": [
                            {
                                "expr": "$func(rate(scylla_cache_row_evictions{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[60s])) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "",
                                "refId": "A",
                                "step": 1
                            }
                        ],
                        "title": "Row Evictions"
                    },
                    {
                        "class": "ops_panel",
                        "span": 3,
                        "targets": [
                            {
                                "expr": "$func(rate(scylla_cache_partition_evictions{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[60s])) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "",
                                "refId": "A",
                                "step": 1
                            }
                        ],
                        "title": "Partition Evictions"
                    }
                ]
            },
            {
                "class": "row",
                "panels": [
                    {
                        "class": "ops_panel",
                        "span": 3,
                        "targets": [
                            {
                                "expr": "$func(rate(scylla_cache_rows_merged_from_memtable{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[60s])) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "",
                                "refId": "A",
                                "step": 1
                            }
                        ],
                        "title": "Row Merges"
                    },
                    {
                        "class": "ops_panel",
                        "span": 3,
                        "targets": [
                            {
                                "expr": "$func(rate(scylla_cache_partition_merges{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[60s])) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "",
                                "refId": "A",
                                "step": 1
                            }
                        ],
                        "title": "Partition Merges"
                    },
                    {
                        "class": "ops_panel",
                        "span": 3,
                        "targets": [
                            {
                                "expr": "$func(rate(scylla_cache_row_removals{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[60s])) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "",
                                "refId": "A",
                                "step": 1
                            }
                        ],
                        "title": "Row Removals"
                    },
                    {
                        "class": "ops_panel",
                        "span": 3,
                        "targets": [
                            {
                                "expr": "$func(rate(scylla_cache_partition_removals{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}[60s])) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "",
                                "refId": "A",
                                "step": 1
                            }
                        ],
                        "title": "Partition Removals"
                    }
                ]
            },
            {
                "class": "row",
                "panels": [
                    {
                        "class": "graph_panel",
                        "span": 3,
                        "targets": [
                            {
                                "expr": "$func(scylla_cache_rows{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "",
                                "refId": "A",
                                "step": 1
                            }
                        ],
                        "title": "Rows"
                    },
                    {
                        "class": "graph_panel",
                        "span": 3,
                        "targets": [
                            {
                                "expr": "$func(scylla_cache_partitions{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "",
                                "refId": "A",
                                "step": 1
                            }
                        ],
                        "title": "Partitions"
                    },
                    {
                        "class": "bytes_panel",
                        "span": 3,
                        "targets": [
                            {
                                "expr": "$func(scylla_cache_bytes_used{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "",
                                "refId": "A",
                                "step": 1
                            }
                        ],
                        "title": "Used Bytes"
                    },
                    {
                        "class": "bytes_panel",
                        "span": 3,
                        "targets": [
                            {
                                "expr": "$func(scylla_cache_bytes_total{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "",
                                "refId": "A",
                                "step": 1
                            }
                        ],
                        "title": "Total Bytes"
                    }
                ],
                "title": "New row"
            },
            {
                "class": "row",
                "height": "25px",
                "gridPos": {"h": 2},
                "panels": [
                    {
                        "class": "text_panel",
                        "content": "<h1 style=\"color:#5881c2; border-bottom: 3px solid #5881c2;\">Materialized Views - Replica</h1>",
                        "style": {}
                    }
                ],
                "title": "New row"
            },
            {
                "class": "row",
                "panels": [
                    {
                        "class": "wps_panel",
                        "span": 3,
                        "targets": [
                            {
                                "expr": "$func(rate(scylla_database_total_view_updates_pushed_local{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]|$^\"}[60s])) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "",
                                "refId": "A",
                                "step": 10
                            }
                        ],
                        "title": "View Local Update",
                        "description" : "Number of view update locally"
                    },
                    {
                        "class": "wps_panel",
                        "span": 3,
                        "targets": [
                            {
                                "expr": "$func(rate(scylla_database_total_view_updates_pushed_remote{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]|$^\"}[60s])) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "",
                                "refId": "A",
                                "step": 10
                            }
                        ],
                        "title": "View Remote Update",
                        "description" : "Number of view update remotely"
                    },
                    {
                        "class": "bytes_panel",
                        "span": 3,
                        "targets": [
                            {
                                "expr": "$func(scylla_database_view_update_backlog{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]|$^\"}) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "",
                                "refId": "A",
                                "step": 10
                            }
                        ],
                        "title": "View Update Backlog",
                        "description" : "Size in bytes of the view update backlog at each base replica."
                    },
                    {
                        "class": "ops_panel",
                        "span": 3,
                        "targets": [
                            {
                                "expr": "$func(rate(scylla_database_dropped_view_updates{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]|$^\"}[60s])) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "",
                                "refId": "A",
                                "step": 10
                            }
                        ],
                        "title": "Dropped View Updates",
                        "description" : "Number of dropped view updates due to an excessive view update backlog."
                    }                ]
            },
            {
                "class": "row",
                "panels": [
                    {
                        "class": "wps_panel",
                        "span": 3,
                        "targets": [
                            {
                                "expr": "$func(rate(scylla_hints_for_views_manager_sent{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]|$^\"}[60s]))  by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "",
                                "refId": "A",
                                "step": 10
                            }
                        ],
                        "title": "Hints for view",
                        "description" : "Number of hints sent for view."
                    },
                    {
                        "class": "wps_panel",
                        "span": 3,
                        "targets": [
                            {
                                "expr": "$func(scylla_storage_proxy_coordinator_current_throttled_base_writes{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]|$^\"})  by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "",
                                "refId": "A",
                                "step": 10
                            }
                        ],
                        "title": "Throttled Base Writes",
                        "description" : "Currently throttled base writes, as a consequence of the respective view update backlog."
                    }
                ]
            },
            {
                "class": "row",
                "height": "25px",
                "gridPos": {"h": 2},
                "panels": [
                    {
                        "class": "text_panel",
                        "content": "<h1 style=\"color:#5881c2; border-bottom: 3px solid #5881c2;\">Memory - Replica</h1>",
                        "style": {}
                    }
                ],
                "title": "New row"
            },
            {
                "class": "row",
                "panels": [
                    {
                        "class": "bytes_panel",
                        "span": 6,
                        "targets": [
                            {
                                "expr": "$func(scylla_lsa_total_space_bytes{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "",
                                "refId": "A",
                                "step": 1
                            }
                        ],
                        "title": "LSA total memory"
                    },
                    {
                        "class": "bytes_panel",
                        "span": 6,
                        "targets": [
                            {
                                "expr": "$func(scylla_lsa_non_lsa_used_space_bytes{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "",
                                "refId": "A",
                                "step": 1
                            }
                        ],
                        "title": "Non-LSA used memory"
                    }
                ],
                "title": "New row"
            },
            {
                "class": "row",
                "height": "25px",
                "gridPos": {"h": 2},
                "panels": [
                    {
                        "class": "text_panel",
                        "content": "<h1 style=\"color:#5881c2; border-bottom: 3px solid #5881c2;\">Compaction - Replica</h1>",
                        "style": {}
                    }
                ],
                "title": "New row"
            },
            {
                "class": "row",
                "panels": [
                    {
                        "class": "graph_panel_int",
                        "span": 4,
                        "targets": [
                            {
                                "expr": "$func(scylla_compaction_manager_compactions{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}) by ([[by]])",
                                "intervalFactor": 1,
                                "legendFormat": "",
                                "metric": "",
                                "refId": "A",
                                "step": 1
                            }
                        ],
                        "title": "Running Compactions"
                    },
                    {
                        "class": "percent_panel",
                        "span": 4,
                        "targets": [
                            {
                                "expr": "($func(rate(scylla_scheduler_runtime_ms{instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\", group=\"compaction\"}[60s])) by ([[by]]))/10",
                                "intervalFactor": 1,
                                "legendFormat": "",
                                "metric": "",
                                "refId": "A",
                                "step": 1
                            }
                        ],
                        "yaxes": [
                            {
                              "format": "percent",
                              "logBase": 1,
                              "max": null,
                              "min": 0,
                              "show": true,
                              "decimals": 0
                            },
                            {
                              "format": "short",
                              "logBase": 1,
                              "max": null,
                              "min": null,
                              "show": true
                            }
                          ],
                        "description": "Percentage of CPU time used by compaction",
                        "title": "Compactions CPU Runtime"
                    },
                    {
                        "class": "graph_panel",
                        "span": 4,
                        "targets": [
                            {
                                "refId": "A",
                                "expr": "avg(scylla_scheduler_shares{group=\"compaction\", instance=~\"[[node]]\",cluster=~\"$cluster|$^\", dc=~\"$dc\", shard=~\"[[shard]]\"}) by ([[by]])",
                                "intervalFactor": 1,
                                "format": "time_series"
                            }
                        ],
                        "description": "Shares assigned to the compaction",
                        "title": "Compactions Shares"
                    }

                ],
                "title": "New row"
            },
            {
                "class": "user_panel_row_header"
            },
            {
                "class": "user_panels_row"
            },
            {
                "class": "monitoring_version_row"
            }
        ],
        "templating": {
            "list": [
                {
                    "class":"by_template_var"
                },
                {
                    "class": "template_variable_single",
                    "label": "cluster",
                    "name": "cluster",
                    "query": "label_values(scylla_reactor_utilization, cluster)"
                },
                {
                    "class": "template_variable_all",
                    "label": "dc",
                    "name": "dc",
                    "query": "label_values(scylla_reactor_utilization{cluster=~\"$cluster\"}, dc)"
                },
                {
                    "class": "template_variable_all",
                    "label": "node",
                    "name": "node",
                    "query": "label_values(scylla_reactor_utilization{cluster=~\"$cluster|$^\", dc=~\"$dc\"}, instance)"
                },
                {
                    "class": "template_variable_all",
                    "label": "shard",
                    "name": "shard",
                    "query": "label_values(scylla_reactor_utilization,shard)",
                    "sort": 3
                },
                {
                    "class": "aggregation_function"
                },
                {
                    "class": "adhoc_filter"
                },
                {
                    "class": "template_variable_custom",
                    "current": {
                        "text": "2019.1",
                        "value": "2019.1"
                    },
                    "name": "scylla_dash_version",
                    "options": [
                        {
                            "selected": true,
                            "text": "2019.1",
                            "value": "2019.1"
                        }
                    ],
                    "query": "2019.1"
                },
                {
                    "class": "monitor_version_var"
                }
            ]
        },
		"tags": [
			"2019.1"
		],
        "time": {
            "from": "now-30m",
            "to": "now"
        },
        "title": "Detailed",
        "overwrite": true,
        "version": 5
    }
}
